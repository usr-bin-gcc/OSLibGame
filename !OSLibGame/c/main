/******************************************************************************

File        : main.c

Date        : Saturday 23rd November 2024

Author      : Gavin Cawley

Description : Sketching out some basic elements of a simple Desktop game 
              implemented using OSLib.

History     : 23/11/2024 - v1.00 

******************************************************************************/
          
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "oslib/wimp.h"
#include "oslib/os.h"        
#include "oslib/osfile.h"
#include "oslib/osspriteop.h"                    
#include "oslib/colourtrans.h"
                  
#include "main.h"

FILE *logfile;    

/*****************************************************************************
*                                                                            *
*                                 GAME LOGIC                                 *
*                                                                            *
*****************************************************************************/
 
GameState state;
       
void initialiseGame(GameState *state)
{
   state->sprite = invader1;
   state->x      = 320 << 8;
   state->y      = 256 << 8;
   state->dx     = 2 << 8;
   state->dy     = 2 << 8;
   state->frame  = 0;

   setTimer(64, updateGame, (void*)state);
}
                                     
void updateGame(void *ws)
{                                                    
   GameState* state = (GameState*)ws;
    
   state->frame++;              

   if (state->frame%4 == 0)
   {
      state->sprite = state->sprite == invader1 ? invader2 : invader1; 
   }

   if ((state->x >> 8) >= 640 - 72)
   {
      state->dx = -(2 << 8);
   }                        
   else if ((state->x >> 8) < 0)
   {
      state->dx = +(2 << 8);
   }  

   if ((state->y >> 8) >= 512 - 68)
   {
      state->dy = -(2 << 8);
   }                        
   else if ((state->y >> 8) < 0)
   {
      state->dy = +(2 << 8);
   } 

   state->x += state->dx;
   state->y += state->dy;

   wimp_force_redraw(block->open.w, 0, 0, 640, +512);

   fprintf(logfile, "updateGame called at time %d\n", 
      os_read_monotonic_time());
   fflush(logfile);    

   setTimer(4, updateGame, ws);   
}

/*****************************************************************************
*                                                                            *
*                              ANIMATION TIMER                               *
*                                                                            *
*****************************************************************************/    
os_t timer;

void (*timerCallback)(void*);       

void *timerWorkspace;

void initialiseTimer()
{         
   timer          = 0;
   timerCallback  = NULL;
   timerWorkspace = NULL;
}

void setTimer(int cs, void (*callback)(void*), void *ws)
{
   timer          = os_read_monotonic_time() + cs;
   timerCallback  = callback;
   timerWorkspace = ws;   
}

void updateTimer()
{
   if (timer > 0)
   {      
      os_t time = os_read_monotonic_time();

      if (time >= timer)
      {
         timer = 0;

         timerCallback(timerWorkspace);
      }
   }
}

/*****************************************************************************
*                                                                            *
*                              SCREEN MODE INFO                              *
*                                                                            *
*****************************************************************************/

typedef union
{        
   int numbers[14];

   struct
   {    
      int modeFlags,
          scrRCol,
          scrBRow,
          nColour,
          xEigFactor,
          yEigFactor,
          lineLength,  
          screenSize,
          yShiftSize,
          log2bpp,
          log2bpc,
          xWindLimit,
          yWindLimit,
          minScreenBanks;
   }
   info;
}
ModeInfo;                                 

ModeInfo modeInfo;
         
void updateModeInfo()
{                                      
   for (int i = 0; i < 15; i++)
   {
      modeInfo.numbers[i] = i;
   }

   modeInfo.numbers[14] = -1;

   os_error *e = xos_read_vdu_variables((os_vdu_var_list*)modeInfo.numbers, 
                                        modeInfo.numbers);

   if (e != NULL)
   {
      fprintf(logfile, "VDU variables:\n"
         "   xEigFactor = %d\n" 
         "   yEigFactor = %d\n"
         "   xWindLimit = %d\n"
         "   yWindLimit = %d\n", 
         modeInfo.info.xEigFactor, 
         modeInfo.info.yEigFactor,
         modeInfo.info.xWindLimit,
         modeInfo.info.yWindLimit);
         fflush(logfile);
   }
}

/*****************************************************************************
*                                                                            *
*                                   SPRITES                                  *
*                                                                            *
*****************************************************************************/

osspriteop_area *area;

osspriteop_header *invader1, *invader2;

os_factors factors;

osspriteop_trans_tab *transTab;

osspriteop_area* loadSpriteFile(const char *filename)
{                                                       
   int size;

   bits type;
   
   fprintf(logfile, "loading sprites...\n"); 
   fflush(logfile);
   
   osfile_read_stamped_no_path(filename, 
                               NULL, 
                               NULL, 
                               &size, 
                               NULL, 
                               &type);
   
   fprintf(logfile, "sprite file size = %d\n", size);
   fflush(logfile);

   size += sizeof(int);

   osspriteop_area *area = malloc(size);

   area->size  = size;
   area->first = 16;

   os_error *e = xosspriteop_load_sprite_file(osspriteop_USER_AREA,
                                                  area,
                                                  filename);

   if (e != NULL)
   {
      fprintf(logfile, "xosspriteop_load_sprite_file failed\n"
         "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
         fflush(logfile);
      free(area);
   }          

   // determine more efficient sprite pointer ids                               
   
   e = xosspriteop_select_sprite(osspriteop_USER_AREA, 
                                     area, 
                                     (osspriteop_id)"invader1",
                                     &invader1);


   if (e != NULL)
   {
      fprintf(logfile, "selecting invader1 failed\n"
         "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
      fflush(logfile);
   }
    
   e = xosspriteop_select_sprite(osspriteop_USER_AREA, 
                                 area, 
                                 (osspriteop_id)"invader2",
                                 &invader2);

   if (e != NULL)
   {
      fprintf(logfile, "selecting invader2 failed\n"
         "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
      fflush(logfile);
   }
                        
   // set up factors and translation table

   factors.xmul = 1<<(modeInfo.info.xEigFactor-1);
   factors.ymul = 1<<(modeInfo.info.yEigFactor);
   factors.xdiv = 1;
   factors.ydiv = 1;         

   e = xcolourtrans_generate_table_for_sprite(area,  
                                       (osspriteop_id)"invader1",    
                                       (os_mode)-1,   
                                       (os_palette*)-1,    
                                       NULL,
                                       colourtrans_CURRENT_IF_ABSENT |
                                       colourtrans_RETURN_WIDE_ENTRIES,
                                       NULL,
                                       NULL,
                                       &size);

   if (e != NULL)
   {
      fprintf(logfile, "xcolourtrans_generate_table #1 failed\n"
         "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
      fflush(logfile);
   }

   fprintf(logfile, "colourtrans table size = %d\n", size);
   fflush(logfile); 

   transTab = malloc(size);

   e = xcolourtrans_generate_table_for_sprite(area, 
                                    (osspriteop_id)"invader1",   
                                    (os_mode)-1,   
                                    (os_palette*)-1,   
                                    transTab,
                                    colourtrans_CURRENT_IF_ABSENT |
                                    colourtrans_RETURN_WIDE_ENTRIES,
                                    NULL,
                                    NULL,
                                    &size);

   if (e != NULL)
   {
      fprintf(logfile, "xcolourtrans_generate_table #2 failed\n"
         "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
      fflush(logfile);
   }
   
   // all done

   fprintf(logfile, "finished loading sprites\n");
   fflush(logfile);
   
   return area;
}

/*****************************************************************************
*                                                                            *
*                                 GAME WINDOW                                *
*                                                                            *
*****************************************************************************/
       
wimp_window *window;
wimp_block  *block;

wimp_window* createWindow()
{           
   wimp_window* window = (wimp_window*)malloc(sizeof(wimp_window));

   window->visible.x0   = 0;
   window->visible.y0   = 0;
   window->visible.x1   = 640;
   window->visible.y1   = 512;
   window->xscroll      = 0;
   window->yscroll      = 0;
   window->next         = wimp_TOP;
   window->flags        = wimp_WINDOW_MOVEABLE  
                        | wimp_WINDOW_BACK_ICON 
                        | wimp_WINDOW_CLOSE_ICON 
                        | wimp_WINDOW_TITLE_ICON 
                        | wimp_WINDOW_HSCROLL 
                        | wimp_WINDOW_VSCROLL 
                        | wimp_WINDOW_TOGGLE_ICON 
                        | wimp_WINDOW_SIZE_ICON 
                        | wimp_WINDOW_NEW_FORMAT;
   window->title_fg     = wimp_COLOUR_BLACK;
   window->title_bg     = wimp_COLOUR_LIGHT_GREY;
   window->work_fg      = wimp_COLOUR_WHITE;
   window->work_bg      = wimp_COLOUR_BLACK; 
   window->scroll_outer = wimp_COLOUR_MID_LIGHT_GREY;
   window->scroll_inner = wimp_COLOUR_VERY_LIGHT_GREY;
   window->extent.x0    = 0;
   window->extent.y0    = 0;
   window->extent.x1    = 640;
   window->extent.y1    = 512;
   window->title_flags  = wimp_ICON_TEXT 
                        | wimp_ICON_HCENTRED 
                        | wimp_ICON_VCENTRED;
   window->work_flags   = wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT;
   window->sprite_area  = 0;
   window->xmin         = 0;
   window->ymin         = 0;
   window->icon_count   = 0;

   strncpy(window->title_data.text, "OSLibGame", 12);              

   return window;
}

wimp_block* createWimpBlock(wimp_window* window)
{
   wimp_block* block = (wimp_block*)malloc(sizeof(wimp_block));
                        
   block->open.w       = wimp_create_window(window);
   block->open.visible = window->visible;
   block->open.xscroll = window->xscroll;
   block->open.yscroll = window->yscroll;
   block->open.next    = window->next;         

   return block;
}

void redrawWindow(wimp_block *block)
{
   wimp_draw draw;
   
   draw.w   = block->redraw.w;
   draw.box = block->redraw.box;

   int more;

   xwimp_redraw_window(&draw, &more);

   while (more)
   {
      int x = draw.box.x0 - draw.xscroll;
      int y = draw.box.y1 - draw.yscroll; 

      os_error *e = xosspriteop_put_sprite_scaled(osspriteop_PTR,
                       area,
                       (osspriteop_id)state.sprite,
                       x + (state.x >> 8),
                       y + (state.y >> 8),
                       os_ACTION_OVERWRITE |
                       osspriteop_GIVEN_WIDE_ENTRIES | 0x8,
                       &factors,
                       transTab);

      if (e != NULL)
      {
         fprintf(logfile, "xosspriteop_put_sprite_scaled failed\n"
            "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
         fflush(logfile);
      }

      xwimp_get_rectangle(&draw, &more);
   }  
}

osbool update(wimp_event_no event, wimp_block* block)
{
   switch(event)
   {
      case wimp_REDRAW_WINDOW_REQUEST:
      {
         fprintf(logfile, "REDRAW_WINDOW_REQUEST received.\n"); 
         fflush(logfile);
                
         redrawWindow(block);

         break;
      }
      case wimp_OPEN_WINDOW_REQUEST:
      {
         fprintf(logfile, "OPEN_WINDOW_REQUEST received.\n");                   
         fflush(logfile);

         wimp_open_window(&block->open);

         break;
      }
      case wimp_CLOSE_WINDOW_REQUEST:
      {
         fprintf(logfile, "CLOSE_WINDOW_REQUEST received.\n");
         fflush(logfile);

         wimp_close_window(block->close.w);

         return TRUE;
      }
      case wimp_USER_MESSAGE:
      {
         break;
      }
      case wimp_USER_MESSAGE_RECORDED:
      {
         if(block->message.action == message_QUIT)
         {
            fprintf(logfile, "QUIT message received.\n");
            fflush(logfile);

            return TRUE;
         }

         break;
      }
   }

   return FALSE;
}
       
/*****************************************************************************
*                                                                            *
*                                MAIN FUNCTION                               *
*                                                                            *
*****************************************************************************/
       
int main()
{
   logfile = fopen("<OSLibGame$Dir>.logfile", "w");
        
   if (logfile == NULL)
   { 
      perror("Error opening log file");
      
      return EXIT_FAILURE;
   } 
  
   fprintf(logfile, "Starting application\n");

   wimp_initialise(wimp_VERSION_RO3,"OSLibGame",NULL,NULL); 
                                      
   updateModeInfo();

   area = loadSpriteFile("<OSLibGame$Dir>.sprites");

   window = createWindow();
   block  = createWimpBlock(window);

   initialiseTimer();
   initialiseGame(&state);
           
   os_error *err = xwimp_open_window(&block->open);
                         
   if (err != NULL)
   {
      fprintf(logfile, "msg = '%s'\n", err->errmess);
      fflush(logfile);
   }

   osbool quit = FALSE;

   while(!quit)
   {
      wimp_event_no event = wimp_poll(0, block, NULL);
                     
      if (event == wimp_NULL_REASON_CODE)
      {
         updateTimer();
      }
      else
      {  
         quit = update(event, block);
      }
   }

   free(window);
   free(block);
   
   wimp_close_down(0); 

   fclose(logfile);
        
   return EXIT_SUCCESS;
}                      

/****************************************************************************/