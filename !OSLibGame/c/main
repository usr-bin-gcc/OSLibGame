/******************************************************************************

File        : main.c

Date        : Saturday 14th June 2025

Author      : Gavin and Cameron Cawley

Description : Sketching out some basic elements of a simple Desktop game 
              implemented using OSLib.

History     : 23/11/2024 - v1.00
              24/11/2024 - v1.10 Added animation using a timer
              05/03/2025 - v1.20 Now uses xwimp_update_window for animation
                                 and xwimp_redraw_window for handline redraw
                                 events (with a common render routine).
              05/04/2025 - v1.30 Experiments with sprite palettes and 
                                 ColourTrans translation tables - now changes
                                 colour when bouncing of the sides.
              29/04/2025 - v1.31 Fixed bug introduced in v1.20 that caused a
                                 crash if a key is pressed or there is a mouse
                                 click on the window.
              14/06/2025 - v1.40 Added diagnostic code to report FPS estimate

******************************************************************************/
          
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "oslib/wimp.h"
#include "oslib/os.h"        
#include "oslib/osfile.h"
#include "oslib/osspriteop.h"                    
#include "oslib/colourtrans.h"
                  
#include "main.h"
#include "logger.h"    

/*****************************************************************************
*                                                                            *
*                        UTILITY FUNCTIONS/MACROS                            *
*                                                                            *
*****************************************************************************/

#define SWAP(type, x, y) {type _type_tmp = x; x = y; y = _type_tmp; }

/*****************************************************************************
*                                                                            *
*                                 GAME LOGIC                                 *
*                                                                            *
*****************************************************************************/
 
GameState state;
       
void initialiseGame(GameState *state)
{
   state->sprite = invader1;
   state->x      = 320 << 8;
   state->y      = 256 << 8;
   state->dx     = 2 << 8;
   state->dy     = 2 << 8;
   state->frame  = 0;

   setTimer(64, updateGame, (void*)state);
}
                                     
void updateFramesPerSecond(void)
{                              
   // estimate frames per second

   static os_t oldTime = 0;
   
   static int frames = 0;

   os_t newTime = os_read_monotonic_time();         

   frames++;  

   if (oldTime == 0)
   {   
      oldTime = os_read_monotonic_time();
   }
   else if (newTime > oldTime + 100)
   {    
      LPRINTF("FPS = %f\n", 100*frames/(newTime - (float)oldTime));      
        
      frames  = 0;
      oldTime = newTime;
   }
}

void updateGame(void *ws)
{                                       
   updateFramesPerSecond();

   // get on with updating the game...
                
   GameState* state = (GameState*)ws;
    
   state->frame++;              

   if (state->frame%4 == 0)
   {
      state->sprite = state->sprite == invader1 ? invader2 : invader1; 
   }

   if ((state->x >> 8) >= 640 - 72)
   {
      state->dx = -(2 << 8);

      transTab = transTab == transTab1 ? transTab2 : transTab1; 
   }                        
   else if ((state->x >> 8) < 0)
   {
      state->dx = +(2 << 8);

      transTab = transTab == transTab1 ? transTab2 : transTab1; 
   }  

   if ((state->y >> 8) >= 512 - 68)
   {
      state->dy = -(2 << 8);

      transTab = transTab == transTab1 ? transTab2 : transTab1; 
   }                        
   else if ((state->y >> 8) < 0)
   {
      state->dy = +(2 << 8);                                    

      transTab = transTab == transTab1 ? transTab2 : transTab1; 
   } 

   state->x += state->dx;
   state->y += state->dy;
     
   updateWindow(gameWindow);

   setTimer(0, updateGame, ws);   
}

void processKeyPress(int keyCode)
{
   switch (keyCode)
   {
      case wimp_KEY_LEFT:
      {                 
         state.dx = -2 << 8;

         break;
      }
      case wimp_KEY_RIGHT:
      {                   
         state.dx = +2 << 8;

         break;
      }
      case wimp_KEY_UP:
      {
         state.dy = +2 << 8;

         break;
      }
      case wimp_KEY_DOWN:
      {
         state.dy = -2 << 8;

         break;
      }
   }         
}

/*****************************************************************************
*                                                                            *
*                              ANIMATION TIMER                               *
*                                                                            *
*****************************************************************************/    
os_t timer;

void (*timerCallback)(void*);       

void *timerWorkspace;

void initialiseTimer()
{         
   timer          = 0;
   timerCallback  = NULL;
   timerWorkspace = NULL;
}

void setTimer(int cs, void (*callback)(void*), void *ws)
{
   timer          = os_read_monotonic_time() + cs;
   timerCallback  = callback;
   timerWorkspace = ws;   
}

void updateTimer()
{
   if (timer > 0)
   {      
      os_t time = os_read_monotonic_time();

      if (time >= timer)
      {
         timer = 0;

         timerCallback(timerWorkspace);
      }
   }
}

/*****************************************************************************
*                                                                            *
*                              SCREEN MODE INFO                              *
*                                                                            *
*****************************************************************************/

typedef union
{        
   int numbers[14];

   struct
   {    
      int modeFlags,
          scrRCol,
          scrBRow,
          nColour,
          xEigFactor,
          yEigFactor,
          lineLength,  
          screenSize,
          yShiftSize,
          log2bpp,
          log2bpc,
          xWindLimit,
          yWindLimit,
          minScreenBanks;
   }
   info;
}
ModeInfo;                                 

ModeInfo modeInfo;
         
void updateModeInfo()
{                                      
   for (int i = 0; i < 15; i++)
   {
      modeInfo.numbers[i] = i;
   }

   modeInfo.numbers[14] = -1;

   os_error *e = xos_read_vdu_variables((os_vdu_var_list*)modeInfo.numbers, 
                                        modeInfo.numbers);

   if (e != NULL)
   {
      fprintf(logfile, "VDU variables:\n"
         "   xEigFactor = %d\n" 
         "   yEigFactor = %d\n"
         "   xWindLimit = %d\n"
         "   yWindLimit = %d\n", 
         modeInfo.info.xEigFactor, 
         modeInfo.info.yEigFactor,
         modeInfo.info.xWindLimit,
         modeInfo.info.yWindLimit);
         fflush(logfile);
   }
}

/*****************************************************************************
*                                                                            *
*                                   SPRITES                                  *
*                                                                            *
*****************************************************************************/

osspriteop_area *area;

osspriteop_header *invader1, *invader2;

os_factors factors;

osspriteop_trans_tab *transTab, *transTab1, *transTab2;            

osspriteop_area* loadSpriteFile(const char *filename)
{                                                       
   int size;

   bits type;
   
   fprintf(logfile, "loading sprites...\n"); 
   fflush(logfile);

   fileswitch_object_type objType;
   
   LOG_ERROR(xosfile_read_stamped_no_path, filename, &objType, NULL, NULL, 
                &size, NULL, &type);
   
   fprintf(logfile, "sprite file size = %d\n", size);
   fflush(logfile);

   size += sizeof(int);

   osspriteop_area *area = malloc(size);

   area->size  = size;
   area->first = 16;

   LOG_ERROR(xosspriteop_load_sprite_file, osspriteop_USER_AREA, area, 
                filename); 

   // determine more efficient sprite pointer ids                               
   
   os_error *e = xosspriteop_select_sprite(osspriteop_USER_AREA, 
                                     area, 
                                     (osspriteop_id)"invader1",
                                     &invader1);


   if (e != NULL)
   {
      fprintf(logfile, "selecting invader1 failed\n"
         "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
      fflush(logfile);
   }
    
   e = xosspriteop_select_sprite(osspriteop_USER_AREA, 
                                 area, 
                                 (osspriteop_id)"invader2",
                                 &invader2);

   if (e != NULL)
   {
      fprintf(logfile, "selecting invader2 failed\n"
         "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
      fflush(logfile);
   }  
             
   // set up factors and translation table #1

   factors.xmul = 1<<(modeInfo.info.xEigFactor-1);
   factors.ymul = 1<<(modeInfo.info.yEigFactor);
   factors.xdiv = 1;
   factors.ydiv = 1;         

   e = xcolourtrans_generate_table_for_sprite(area,  
                                       (osspriteop_id)"invader1",    
                                       (os_mode)-1,   
                                       (os_palette*)-1,    
                                       NULL,
                                       /* colourtrans_CURRENT_IF_ABSENT | */
                                       colourtrans_RETURN_WIDE_ENTRIES,
                                       NULL,
                                       NULL,
                                       &size);

   if (e != NULL)
   {
      fprintf(logfile, "xcolourtrans_generate_table #1 failed\n"
         "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
      fflush(logfile);
   }

   fprintf(logfile, "colourtrans table size = %d\n", size);
   fflush(logfile); 

   transTab1 = malloc(size);

   e = xcolourtrans_generate_table_for_sprite(area, 
                                    (osspriteop_id)"invader2",   
                                    (os_mode)-1,   
                                    (os_palette*)-1,   
                                    transTab1,
                                    /* colourtrans_CURRENT_IF_ABSENT | */
                                    colourtrans_RETURN_WIDE_ENTRIES,
                                    NULL,
                                    NULL,
                                    &size);

   if (e != NULL)
   {
      fprintf(logfile, "xcolourtrans_generate_table #2 failed\n"
         "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
      fflush(logfile);
   }

   // switch green and red for invader 2 

   {                                       
      int      size;
      int     *palette;
      os_mode  mode;

      e = xosspriteop_read_palette_size(osspriteop_USER_AREA, 
                                        area, 
                                        (osspriteop_id)"invader2", 
                                        &size, 
                                        (os_sprite_palette**)&palette, 
                                        &mode);

      if (e != NULL)
      {
         fprintf(logfile, "getting invader2 palette size failed\n"
            "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
      }                               

      fprintf(logfile, "invader 2 pallete size = %d\n", size);
      fprintf(logfile, "pallete:\n");

      for (int i = 0; i < 2*size; i++)
      {
         fprintf(logfile, "   %2d : %010X\n", i, palette[i]);
      }           

      // swap colours 10 (green) and 11 (red)

      SWAP(int, palette[22], palette[20]);
      SWAP(int, palette[23], palette[21]);
   } 

             
   // set up factors and translation table #1

   factors.xmul = 1<<(modeInfo.info.xEigFactor-1);
   factors.ymul = 1<<(modeInfo.info.yEigFactor);
   factors.xdiv = 1;
   factors.ydiv = 1;         

   e = xcolourtrans_generate_table_for_sprite(area,  
                                       (osspriteop_id)"invader1",    
                                       (os_mode)-1,   
                                       (os_palette*)-1,    
                                       NULL,
                                       /* colourtrans_CURRENT_IF_ABSENT | */
                                       colourtrans_RETURN_WIDE_ENTRIES,
                                       NULL,
                                       NULL,
                                       &size);

   if (e != NULL)
   {
      fprintf(logfile, "xcolourtrans_generate_table #1 failed\n"
         "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
      fflush(logfile);
   }

   fprintf(logfile, "colourtrans table size = %d\n", size);
   fflush(logfile); 

   transTab2 = malloc(size);

   e = xcolourtrans_generate_table_for_sprite(area, 
                                    (osspriteop_id)"invader2",   
                                    (os_mode)-1,   
                                    (os_palette*)-1,   
                                    transTab2,
                                    /* colourtrans_CURRENT_IF_ABSENT | */
                                    colourtrans_RETURN_WIDE_ENTRIES,
                                    NULL,
                                    NULL,
                                    &size);

   if (e != NULL)
   {
      fprintf(logfile, "xcolourtrans_generate_table #2 failed\n"
         "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
      fflush(logfile);
   }
                                            
   transTab = transTab1;

   // all done

   fprintf(logfile, "finished loading sprites\n");
   fflush(logfile);
   
   return area;
}

/*****************************************************************************
*                                                                            *
*                                 GAME WINDOW                                *
*                                                                            *
*****************************************************************************/
       
wimp_window *window;
wimp_block  *block;
wimp_w       gameWindow;

wimp_window* createWindow()
{           
   wimp_window* window = (wimp_window*)malloc(sizeof(wimp_window));

   window->visible.x0   = 0;
   window->visible.y0   = 0;
   window->visible.x1   = 640;
   window->visible.y1   = 512;
   window->xscroll      = 0;
   window->yscroll      = 0;
   window->next         = wimp_TOP;
   window->flags        = wimp_WINDOW_MOVEABLE  
                        | wimp_WINDOW_BACK_ICON 
                        | wimp_WINDOW_CLOSE_ICON 
                        | wimp_WINDOW_TITLE_ICON 
                        | wimp_WINDOW_HSCROLL 
                        | wimp_WINDOW_VSCROLL 
                        | wimp_WINDOW_TOGGLE_ICON 
                        | wimp_WINDOW_SIZE_ICON 
                        | wimp_WINDOW_NEW_FORMAT
                        | wimp_WINDOW_HAS_FOCUS
                        | wimp_WINDOW_HOT_KEYS;
   window->title_fg     = wimp_COLOUR_BLACK;
   window->title_bg     = wimp_COLOUR_LIGHT_GREY;
   window->work_fg      = wimp_COLOUR_WHITE;
   window->work_bg      = wimp_COLOUR_BLACK; 
   window->scroll_outer = wimp_COLOUR_MID_LIGHT_GREY;
   window->scroll_inner = wimp_COLOUR_VERY_LIGHT_GREY;
   window->highlight_bg = wimp_COLOUR_CREAM;
   window->extent.x0    = 0;
   window->extent.y0    = 0;
   window->extent.x1    = 640;
   window->extent.y1    = 512;
   window->title_flags  = wimp_ICON_TEXT 
                        | wimp_ICON_HCENTRED 
                        | wimp_ICON_VCENTRED;
   window->work_flags   = wimp_BUTTON_WRITABLE << wimp_ICON_BUTTON_TYPE_SHIFT;
   window->sprite_area  = 0;
   window->xmin         = 0;
   window->ymin         = 0;
   window->icon_count   = 0;

   strncpy(window->title_data.text, "OSLibGame", 12);              

   return window;
}

wimp_block* createWimpBlock(wimp_window* window)
{
   wimp_block* block = (wimp_block*)malloc(sizeof(wimp_block));
                        
   block->open.w       = wimp_create_window(window);
   block->open.visible = window->visible;
   block->open.xscroll = window->xscroll;
   block->open.yscroll = window->yscroll;
   block->open.next    = window->next;           
   gameWindow          = block->open.w;

   return block;
}

void render(wimp_draw *draw, osbool more)
{
   while (more)
   {
      int x = draw->box.x0 - draw->xscroll;
      int y = draw->box.y1 - draw->yscroll; 

      os_error *e = xosspriteop_put_sprite_scaled(osspriteop_PTR,
                       area,
                       (osspriteop_id)state.sprite,
                       x + (state.x >> 8),
                       y + (state.y >> 8),
                       os_ACTION_OVERWRITE |
                       osspriteop_GIVEN_WIDE_ENTRIES | osspriteop_USE_MASK,
                       &factors,
                       transTab);

      if (e != NULL)
      {
         fprintf(logfile, "xosspriteop_put_sprite_scaled failed\n"
            "   errnum = %d: message = '%s'\n", e->errnum, e->errmess);
         fflush(logfile);
      }

      xwimp_get_rectangle(draw, &more);
   }  
}

void updateWindow(wimp_w window)
{
   wimp_draw draw;     

   // only update window where invader appears
   
   draw.w      = window;
   draw.box.x0 = (state.x >> 8);
   draw.box.y0 = (state.y >> 8);
   draw.box.x1 = draw.box.x0 + (38 << 1);
   draw.box.y1 = draw.box.y0 + (19 << 2);
            
   int more;

   xwimp_update_window(&draw, &more);

   render(&draw, more);
}

void redrawWindow(wimp_block *block)
{
   int more;

   xwimp_redraw_window(&block->redraw, &more);

   render(&block->redraw, more);
}

osbool update(wimp_event_no event, wimp_block* block)
{
   switch(event)
   {
      case wimp_MOUSE_CLICK:
      {
         fprintf(logfile, "MOUSE_CLICK received.\n"); 
         fflush(logfile);

         break;
      }
      case wimp_KEY_PRESSED:
      {
         fprintf(logfile, "KEY_PRESSED received (%#x).\n", block->key.c);
         fflush(logfile);

         processKeyPress(block->key.c);

         break;
      }
      case wimp_REDRAW_WINDOW_REQUEST:
      {
         //fprintf(logfile, "REDRAW_WINDOW_REQUEST received.\n"); 
         //fflush(logfile);
                
         redrawWindow(block);

         break;
      }
      case wimp_OPEN_WINDOW_REQUEST:
      {
         fprintf(logfile, "OPEN_WINDOW_REQUEST received.\n");                   
         fflush(logfile);

         wimp_open_window(&block->open);

         break;
      }
      case wimp_CLOSE_WINDOW_REQUEST:
      {
         fprintf(logfile, "CLOSE_WINDOW_REQUEST received.\n");
         fflush(logfile);

         wimp_close_window(block->close.w);

         return TRUE;
      }
      case wimp_USER_MESSAGE:
      {
         break;
      }
      case wimp_USER_MESSAGE_RECORDED:
      {
         if(block->message.action == message_QUIT)
         {
            fprintf(logfile, "QUIT message received.\n");
            fflush(logfile);

            return TRUE;
         }

         break;
      }
   }

   return FALSE;
}
       
/*****************************************************************************
*                                                                            *
*                                MAIN FUNCTION                               *
*                                                                            *
*****************************************************************************/
       
int main()
{
   initialiseLog("<OSLibGame$Dir>.logfile");
  
   LPRINTF("Starting application '%s'\n", "OSLibGame");

   wimp_initialise(wimp_VERSION_RO3,"OSLibGame",NULL,NULL); 
                                      
   updateModeInfo();

   area = loadSpriteFile("<OSLibGame$Dir>.sprites");

   window = createWindow();
   block  = createWimpBlock(window);

   initialiseTimer();
   initialiseGame(&state);
           
   LOG_ERROR(xwimp_open_window, &block->open);

   osbool quit = FALSE;

   while(!quit)
   {
      wimp_event_no event = wimp_poll(0, block, NULL);
                     
      if (event == wimp_NULL_REASON_CODE)
      {
         updateTimer();
      }
      else
      {  
         quit = update(event, block);
      }
   }

   free(window);
   free(block);
   
   wimp_close_down(0); 

   closeLog();
        
   return EXIT_SUCCESS;
}                      

/****************************************************************************/